version: "3.9"

services:
  db-service:
    build: services/db-service
    container_name: db-service
    ports: ["50051:50051"]
    networks: [app]

  postgres:
    image: postgres:17
    container_name: database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./services/db-service/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [app]

  api-gateway:
    build: ./services/api-gateway
    env_file: [./services/api-gateway/.env]
    container_name: api-gateway
    ports: ["8080:8080"]
    depends_on: [db-service, minio, minio-bootstrap]
    environment:
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${VIDEO_USER:-video_svc}
      MINIO_SECRET_KEY: ${VIDEO_SECRET:-VIDEOSECRET}
      MINIO_USE_SSL: "false"
    networks: [app]

  orchestrator:
    build: ./services/orchestrator
    container_name: orchestrator
    ports: ["8081:8081"]
    depends_on: [db-service, api-gateway]
    networks: [app]

  access-service:
    build: ./services/access-service
    container_name: access-service
    depends_on: [db-service, api-gateway, minio, minio-bootstrap]
    environment:
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      MINIO_ENDPOINT: localhost:9000
      MINIO_ACCESS_KEY: ${ACCESS_USER:-access_svc}
      MINIO_SECRET_KEY: ${ACCESS_SECRET:-ACCESSSECRET}
      MINIO_REGION: "us-east-1"
      MINIO_USE_SSL: "false"
    networks: [app]

  barpath:
    build: ./services/barpath
    container_name: barpath
    depends_on: [rabbitmq, minio, minio-bootstrap, orchestrator]
    volumes:
      - ./services/barpath/runs:/app/runs
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${ANALYZE_USER:-analyze_svc}
      MINIO_SECRET_KEY: ${ANALYZE_SECRET:-ANALYZESECRET}
      MINIO_USE_SSL: "false"
    networks: [app]

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-admin123}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks: [app]

  minio-bootstrap:
    image: minio/mc
    container_name: minio-bootstrap
    depends_on: [minio]
    entrypoint: ["/bin/sh", "-c", "/scripts/bootstrap.sh"]
    volumes:
      - ./services/minio-bootstrap/bootstrap.sh:/scripts/bootstrap.sh
    environment:
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-admin123}
      ACCESS_USER: ${ACCESS_USER:-access_svc}
      ACCESS_KEY:  ${ACCESS_KEY:-AKIAACCESS}
      ACCESS_SECRET: ${ACCESS_SECRET:-ACCESSSECRET}
      VIDEO_USER:  ${VIDEO_USER:-video_svc}
      VIDEO_KEY:   ${VIDEO_KEY:-AKIAVIDEO}
      VIDEO_SECRET: ${VIDEO_SECRET:-VIDEOSECRET}
      ANALYZE_USER: ${ANALYZE_USER:-analyze_svc}
      ANALYZE_KEY: ${ANALYZE_KEY:-AKIAANALYZE}
      ANALYZE_SECRET: ${ANALYZE_SECRET:-ANALYZESECRET}
    networks: [app]

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_HEARTBEAT: 900
    networks: [app]

  redis:
    image: redis
    container_name: redis
    ports: ["6379:6379"]
    networks: [app]

networks:
  app: {}

volumes:
  postgres-data:
  minio-data:
